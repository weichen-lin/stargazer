version: '2.4'
services:
  kafka:
    image: bitnami/kafka:3.1.0
    container_name: kafka
    command:
      - 'sh'
      - '-c'
      - '/opt/bitnami/scripts/kafka/setup.sh && kafka-storage.sh format --config "$${KAFKA_CONF_FILE}" --cluster-id "lkorDA4qT6W1K_dk0LHvtg" --ignore-formatted  && /opt/bitnami/scripts/kafka/run.sh' # Kraft specific initialise
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      # Start Kraft Setup (Kafka as Controller - no Zookeeper)
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LOG_DIRS=/tmp/logs
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,INTERNAL://:9094
      # End Kraft Specific Setup
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,INTERNAL://kafka:9094
    ports:
      - '9092:9092'
    networks:
      - startgazer-net

  # kafka-ui:
  #   image: provectuslabs/kafka-ui
  #   container_name: kafka-ui
  #   ports:
  #     - '8080:8080'
  #   restart: 'always'
  #   environment:
  #     KAFKA_CLUSTERS_0_NAME: 'lkorDA4qT6W1K_dk0LHvtg'
  #     KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9094
  #   depends_on:
  #     - kafka
  #   networks:
  #     - startgazer-net

  neo4j:
    image: neo4j:5.18.0
    container_name: neo4j
    ports:
      - '7474:7474'
      - '7687:7687'
    environment:
      NEO4J_AUTH: neo4j/password
    networks:
      - startgazer-net
    volumes:
      - neo4j-data:/var/lib/neo4j/data

  producer:
    image: producer:latest
    build:
      context: ./producer
      dockerfile: Dockerfile
    container_name: producer
    ports:
      - '8080'
    env_file:
      - .env
    depends_on:
      - kafka
    restart: 'always'
    networks:
      - startgazer-net

  next-app:
    image: next-app:latest
    build:
      context: ./next-app
      dockerfile: Dockerfile
    container_name: next-app
    env_file:
      - .env.local
    depends_on:
      - kafka
      - neo4j
      - producer
      - transformer
    restart: 'always'
    networks:
      - startgazer-net

  transformer:
    image: transformer:latest
    build:
      context: ./transformer
      dockerfile: Dockerfile
    container_name: transformer
    ports:
      - '5000'
    env_file:
      - .env
    depends_on:
      - kafka
      - neo4j
    restart: 'always'
    networks:
      - startgazer-net

  nginx:
    image: nginx:1.21.3
    container_name: nginx
    ports:
      - '80:80'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - next-app
      - producer
    networks:
      - startgazer-net

networks:
  startgazer-net:
    driver: bridge

volumes:
  neo4j-data:
